// üìö BIBLIOTECA PESSOAL ‚Äî Gerenciador de Leituras

const { select, input, checkbox } = require('@inquirer/prompts'); //Biblioteca externa de node.js
const fs = require('fs').promises; //m√≥dulo nativo de node.js - fun√ß√µes assincronas
const { randomUUID } = require('crypto'); //m√≥dulo nativo q gera id

let livros = [] // Array principal que armazena todos os livros


// üî∏ Fun√ß√µes de Persist√™ncia (Carregar e Salvar JSON)

// Fun√ß√£o que BUSCA os livros salvos no arquivo JSON
// "async" significa que ela vai esperar a leitura do arquivo terminar antes de continuar
const carregarLivros = async () => {
    try {
        const dados = await fs.readFile("livros.json", "utf-8"); // L√™ o arquivo e retorna o conte√∫do em texto
        livros = JSON.parse(dados); // Converte o texto JSON em um array de objetos JavaScript
    } catch (erro) {
        livros = []; // Se o arquivo n√£o existir ou der erro, cria um array vazio
    }
}

// Fun√ß√£o que GRAVA os livros no arquivo JSON (salva as altera√ß√µes)
const salvarLivros = async () => {
    // JSON.stringify transforma o array 'livros' em texto para salvar no arquivo
    // O "null, 2" serve para deixar o arquivo organizado e f√°cil de ler
    await fs.writeFile("livros.json", JSON.stringify(livros, null, 2));
} // Essa fun√ß√£o garante que as mudan√ßas n√£o se percam quando fechar o programa


// üî∏ Cadastro de Livro

// Fun√ß√£o que ADICIONA um novo livro ao sistema
const cadastrarLivro = async () => {
    const titulo = await input({ message: "Digite o t√≠tulo:" });
    const autor = await input({ message: "Digite o autor:" });
    const paginas = await input({ message: "Digite a quantidade de p√°ginas:" });
    const genero = await input({ message: "Digite o g√™nero:" });

    // Verifica se TODOS os campos foram preenchidos (n√£o podem estar vazios)
    // every = verifica se todos os itens do array atendem a condi√ß√£o
    // trim() = remove espa√ßos em branco no in√≠cio e fim do texto
    if (![titulo, autor, paginas, genero].every(campo => campo && campo.trim())) {
        console.log("Todos os campos devem ser preenchidos.");
        return; // Para a fun√ß√£o aqui se algum campo estiver vazio
    }

    // Converte o valor de p√°ginas de texto (string) para n√∫mero inteiro
    const pagge = parseInt(paginas);

    // Verifica se o n√∫mero de p√°ginas √© v√°lido (tem que ser maior que 0)
    if (!pagge || pagge <= 0) {
        console.log("N√∫mero de p√°ginas inv√°lido. Insira um n√∫mero (maior que 0).");
        return; // Para a fun√ß√£o se o n√∫mero for inv√°lido
    }
    console.log(`O livro ${titulo} foi cadastrado com sucesso!`);

    // ‚úÖ ADICIONA um novo livro ao final do array 'livros'
    // push() = adiciona um item no final da lista
    livros.push({
        id: randomUUID(),                           // Gera um c√≥digo √∫nico para identificar este livro
        titulo: titulo,                             // Nome do livro
        autor: autor,                               // Nome de quem escreveu
        paginas: paginas,                           // Quantas p√°ginas tem no total
        genero: genero,                             // Tipo de livro (romance, aventura, etc)
        status: `quero_ler`,                        // Come√ßa como "quero ler" (n√£o come√ßou a ler ainda)
        paginaAtual: 0,                             // Est√° na p√°gina 0 (n√£o come√ßou)
        avaliacao: null,                            // null = vazio, ainda n√£o tem nota
        dataInicio: new Date().toLocaleString(),    // Registra quando o livro foi cadastrado
        dataFim: null                               // Ainda n√£o terminou de ler
    });
}

// Fun√ß√£o que MOSTRA os livros que voc√™ ainda quer ler
const listaDesejos = async () => {
    // Primeiro verifica se existe pelo menos 1 livro cadastrado
    if (livros.length === 0) {
        console.log("\nNenhum livro cadastrado.\n");
        return; // Para aqui se n√£o tiver nenhum livro
    }

    // filter() = cria uma nova lista s√≥ com os livros que t√™m status 'quero_ler'
    const desejos = livros.filter(livro => livro.status === "quero_ler");

    if (desejos.length === 0) {
        console.log(" Nenhum livro na sua lista de desejos!");
        return;
    }

    console.log(`\n‚ú® Lista de Desejos ‚ú®\n`);

    // forEach = repete uma a√ß√£o para cada livro da lista
    // index = posi√ß√£o do livro na lista (come√ßa em 0, por isso somamos +1)
    desejos.forEach((l, index) => {
        console.log(`${index + 1}. ${l.titulo} ‚Äî ${l.autor} ‚Äî ${l.paginas} ‚Äî (${l.genero})`);
    });

    console.log("\nTotal de livros na lista de desejos:", desejos.length);

};

// Fun√ß√£o que MUDA o status do livro (quero ler ‚Üí lendo, ou lido para lendo -> ler)
const atualizarStatus = async () => {
    if (livros.length === 0) {
        console.log("\nNenhum livro cadastrado.\n");
        return;
    }

    console.log(`\n‚ú®Altere o status do seu Livro ‚ú®\n`);

    // Mostra um menu com todos os livros para o usu√°rio escolher
    const livroSelecionado = await select({
        message: "Selecione o livro para atualizar:",
        // map() = transforma cada livro em uma op√ß√£o do menu
        choices: livros.map(l => ({            // 'l' representa cada livro da lista
            name: `${l.titulo} (${l.status})`, // O que aparece na tela
            value: l.id                        // O ID que ser√° usado internamente
        }))
    });

    const novoStatus = await select({
        message: "Qual o novo status?",
        choices: [
            { name: " Quero ler", value: "quero_ler" },
            { name: " Lendo", value: "lendo" },
        ]
    });

    // find() = procura e retorna o livro que tem o mesmo ID que foi selecionado
    const livro = livros.find(l => l.id === livroSelecionado);
    livro.status = novoStatus; // Atualiza o status para o novo valor escolhido

    console.log("‚úÖ Status atualizado com sucesso!");
    await salvarLivros(); // Salva as mudan√ßas no arquivo JSON

}

// Fun√ß√£o que ATUALIZA em qual p√°gina voc√™ est√° lendo
const atualizarProgresso = async () => {
    if (livros.length === 0) {
        console.log("‚ùå Nenhum livro cadastrado!");
        return;
    }

    // Pega s√≥ os livros que est√£o com status "lendo" (livros em andamento)
    const lendo = livros.filter(l => l.status === "lendo");

    if (lendo.length === 0) {
        console.log("üìñ Nenhum livro em leitura no momento.");
        return;
    }

    console.log(`\n‚ú® Atualize seu Progresso de P√°ginas ‚ú®\n`);

    // Escolhe o livro em leitura
    const livroSelecionado = await select({
        message: "Escolha o livro que voc√™ est√° lendo:",
        choices: lendo.map(l => ({
            name: `${l.titulo} (p√°ginas: ${l.paginaAtual}/${l.paginas})`,
            value: l.id
        }))
    });

    //Encontra o livro completo usando o ID que foi selecionado
    const livro = livros.find(l => l.id === livroSelecionado);
    if (!livro) {
        console.log("‚ùå Livro n√£o encontrado.");
        return;
    }

    // Garante que o total de p√°ginas seja um n√∫mero v√°lido
    const totalPaginas = Number(livro.paginas);
    // isNaN = "is Not a Number" (verifica se N√ÉO √© um n√∫mero)
    if (Number.isNaN(totalPaginas) || totalPaginas <= 0) {
        console.log("‚ö†Ô∏è Total de p√°ginas inv√°lido no cadastro.");
        return;
    }

    const novaPaginaInput = await input({
        message: "üìÑ Em qual p√°gina voc√™ parou?"
    });

    // Converte o texto digitado para n√∫mero
    let novaPagina = Number(novaPaginaInput);
    
    // Verifica se a p√°gina informada n√£o ultrapassa o total de p√°ginas do livro
    if (novaPagina > totalPaginas) {
        console.log(`‚ö†Ô∏è N√∫mero de p√°ginas lidas n√£o pode ser maior que o total do livro (${totalPaginas}).`);
        return; // Para a fun√ß√£o se digitou um n√∫mero maior que o total
    }

    // Verifica se terminou de ler o livro 
    if (novaPagina >= totalPaginas) {
        livro.paginaAtual = totalPaginas;    // Define como a √∫ltima p√°gina
        livro.status = "lido";                // Muda o status para "lido"
        livro.dataFim = new Date().toLocaleString(); // Registra quando terminou
        console.log(`üéâ Parab√©ns! Voc√™ concluiu "${livro.titulo}" em ${livro.dataFim}.`);
    } else {
        // Se ainda n√£o terminou, apenas atualiza a p√°gina atual
        livro.paginaAtual = novaPagina;
        console.log(`üìñ Progresso atualizado: p√°gina ${livro.paginaAtual} de ${totalPaginas}`);
    }
    
    // Se o livro foi marcado como lido, pede uma avalia√ß√£o
    if (livro.status === "lido") {
        let avaliacao;

        // while(true) = repete at√© receber um break (avalia√ß√£o v√°lida)
        while (true) {
            const avaliacaoEstrelas = await input({
                message: "De 1 a 5 estrelas, quanto voc√™ avalia esse livro?"
            });

            avaliacao = parseInt(avaliacaoEstrelas); // Converte texto para n√∫mero

            // Verifica se a nota est√° entre 1 e 5
            if (avaliacao >= 1 && avaliacao <= 5) {
                livro.avaliacao = avaliacao; // Salva a avalia√ß√£o
                console.log(`‚≠ê Voc√™ avaliou "${livro.titulo}" com ${avaliacao} estrela(s)!`);
                break; // Para o loop quando a avalia√ß√£o for v√°lida
            } else {
                console.log("‚ö†Ô∏è Avalia√ß√£o inv√°lida. Digite um n√∫mero entre 1 e 5.");
                // Continua no loop pedindo uma nova avalia√ß√£o
            }
        }

        await salvarLivros(); // Salva todas as mudan√ßas no arquivo JSON
    }

}
// Fun√ß√£o que CALCULA e MOSTRA estat√≠sticas sobre seus livros lidos
const estatisticas = async () => {
    // 1Ô∏è‚É£ Verifica se existem livros cadastrados
    if (!Array.isArray(livros) || livros.length === 0) {
        console.log("‚ö†Ô∏è N√£o existem livros cadastrados para gerar estat√≠sticas!");
        return;
    }

    console.log(`\n‚ú® Est√°tisticas Liter√°rias ‚ú®\n`);

    // 2Ô∏è‚É£ Pega s√≥ os livros que foram completamente lidos
    const lidos = livros.filter(l => l.status === "lido" && l.dataFim);

    if (lidos.length === 0) {
        console.log("‚ö†Ô∏è Nenhum livro foi conclu√≠do ainda!");
        return;
    }

    // 3Ô∏è‚É£ Conta quantos livros foram lidos em cada m√™s
    const livrosPorMes = {}; // Objeto vazio que vai armazenar: { "01/2025": 3, "02/2025": 5 }
    lidos.forEach(l => {
        let data;

        try {
            // Separa a data da hora (ex: "08/10/2025, 18:00" vira "08/10/2025")
            const [parteData] = l.dataFim.split(',');
            // Separa dia, m√™s e ano e converte cada um para n√∫mero
            const [dia, mes, ano] = parteData.trim().split('/').map(Number);

            if (!dia || !mes || !ano) throw new Error("Formato inv√°lido");
            data = new Date(ano, mes - 1, dia); // Cria um objeto de data (m√™s -1 porque come√ßa em 0)
        } catch {
            console.log(`‚ö†Ô∏è Data inv√°lida em "${l.titulo}": ${l.dataFim}`);
            return; // Pula este livro se a data estiver errada
        }

        // Formata como "mm/yyyy" (ex: "01/2025")
        const mesAno = `${String(data.getMonth() + 1).padStart(2, '0')}/${data.getFullYear()}`;
        // Adiciona 1 ao contador desse m√™s (se n√£o existir, come√ßa com 0)
        livrosPorMes[mesAno] = (livrosPorMes[mesAno] || 0) + 1;
    });

    // 4Ô∏è‚É£ Descobre qual √© o g√™nero favorito (baseado nas melhores avalia√ß√µes)
    const generos = {}; // Vai armazenar dados de cada g√™nero
    lidos.forEach(l => {
        if (!l.genero) return; // Pula se n√£o tiver g√™nero
        // Se esse g√™nero ainda n√£o existe no objeto, cria ele
        if (!generos[l.genero]) generos[l.genero] = { count: 0, totalAvaliacao: 0 };
        generos[l.genero].count++; // Adiciona 1 ao contador de livros desse g√™nero
        generos[l.genero].totalAvaliacao += l.avaliacao || 0; // Soma a avalia√ß√£o
    });

    // Calcula a m√©dia de avalia√ß√£o de cada g√™nero e ordena do melhor para o pior
    const generoFavorito = Object.entries(generos) // Transforma objeto em array
        .map(([genero, data]) => ({
            genero,
            count: data.count,
            mediaAvaliacao: data.totalAvaliacao / data.count // Calcula a m√©dia
        }))
        .sort((a, b) => b.mediaAvaliacao - a.mediaAvaliacao || b.count - a.count)[0] || null;
        // sort() = ordena do maior para o menor

    // 5Ô∏è‚É£ Conta o total de livros lidos
    const totalLidos = lidos.length;

    // 6Ô∏è‚É£ Calcula quantas p√°ginas voc√™ l√™ em m√©dia por livro
    const mediaPaginas = totalLidos
        ? lidos.reduce((acc, l) => acc + Number(l.paginas), 0) / totalLidos
        // reduce() = soma todas as p√°ginas de todos os livros
        : 0;

    const mediaPaginasArredondada = Math.round(mediaPaginas * 10) / 10; // Arredonda para 1 casa decimal

    // 7Ô∏è‚É£ Mostra todas as estat√≠sticas no console
    console.log("\nEstat√≠sticas de leitura:");
    console.log("Total de livros lidos:", totalLidos);
    console.log("M√©dia de p√°ginas por livro:", mediaPaginasArredondada);
    console.log("Livros por m√™s:", livrosPorMes);
    console.log("G√™nero favorito:", generoFavorito ? `${generoFavorito.genero} (m√©dia: ${generoFavorito.mediaAvaliacao.toFixed(1)}, 
    quantidade: ${generoFavorito.count})` : "Nenhum");

    return { livrosPorMes, generoFavorito, totalLidos, mediaPaginas: mediaPaginasArredondada };

};

// Fun√ß√£o que MOSTRA os livros que voc√™ mais gostou (avaliou com 4 ou 5 estrelas)
const recomendacaoBook = async () => {
    if (livros.length === 0) {
        console.log("‚ùå Nenhum livro cadastrado!");
        return;
    }

    // Filtra s√≥ os livros que voc√™ terminou E avaliou com 4 ou 5 estrelas
    const recomendados = livros.filter(l =>
        l.status === "lido" && (l.avaliacao === 4 || l.avaliacao === 5)
    );

    if (recomendados.length === 0) {
        console.log("üì≠ Voc√™ ainda n√£o avaliou nenhum livro com 4 ou 5 estrelas.");
        return;
    }

    console.log(`\n‚ú® Suas recomenda√ß√µes Liter√°rias ‚ú®\n`);

    // Mostra cada livro recomendado com suas informa√ß√µes
    recomendados.forEach((l, index) => {
        console.log(`${index + 1}. "${l.titulo}" ‚Äî ${l.autor} ‚≠ê ${l.avaliacao}/5`);
    });

    console.log(`\nTotal de recomenda√ß√µes: ${recomendados.length}\n`);
};

// Fun√ß√£o que REMOVE livros do sistema
const deletarLivros = async () => {

    if (livros.length == 0) {
        console.log("N√£o existem livros para deletar!");
        return;
    }

    // Prepara uma lista de op√ß√µes com checkbox (voc√™ pode marcar v√°rios)
    const escolhas = livros.map(l => ({
        name: `${l.titulo} ‚Äî ${l.autor}`, // O que aparece na tela para o usu√°rio
        value: l.id                        // O ID que ser√° usado para identificar qual deletar
    }));

    // Mostra checkboxes para o usu√°rio marcar quais livros quer deletar
    const itensADeletar = await checkbox({
        message: "Selecione um livro para deletar",
        choices: escolhas,
        instructions: false,
    });

    // Se n√£o marcou nenhum livro, n√£o faz nada
    if (itensADeletar.length == 0) {
        console.log("Nenhum livro para deletar!");
        return;
    }

    // filter com ! = fica s√≥ com os livros que N√ÉO est√£o na lista para deletar
    // includes() = verifica se o ID est√° na lista de itens para deletar
    livros = livros.filter(l => !itensADeletar.includes(l.id));

    console.log("Livro(s) deletado(s) com sucesso!");

}
// Fun√ß√£o PRINCIPAL que inicia o programa
const start = async () => {
    await carregarLivros(); // Primeiro: carrega os livros salvos do arquivo JSON

    // while(true) = loop infinito, o menu fica aparecendo at√© voc√™ escolher "Sair"
    while (true) {
        await salvarLivros() // Salva os dados a cada volta do loop

        // Mostra o menu principal com todas as op√ß√µes
        const opcao = await select({
            message: "Menu >",
            choices: [
                {
                    name: "Cadastrar Livro",       // O que aparece na tela
                    value: "cadastrar"             // Valor usado no switch
                },
                {
                    name: "Atualizar STATUS do Livro",
                    value: "atualizarStatus"
                },
                {
                    name: "Lista de Desejos",
                    value: "desejos"
                },
                {
                    name: "Atualizar p√°ginas",
                    value: "progresso"
                },
                {
                    name: "An√°lise de est√°tisticas",
                    value: "estatisticas"
                },
                {
                    name: "Recomenda√ß√£o de Livros",
                    value: "recomenda√ß√£o"
                },
                {
                    name: "Deletar Itens",
                    value: "deletar"
                },
                {
                    name: "Sair",
                    value: "sair"
                }
            ]
        });

        // switch = verifica qual op√ß√£o foi escolhida e executa a fun√ß√£o correspondente
        switch (opcao) {
            case "cadastrar":
                await cadastrarLivro();      // Chama a fun√ß√£o de cadastrar
                break;                       // Para aqui e volta pro menu
            case "atualizarStatus":
                await atualizarStatus();
                break;
            case "desejos":
                await listaDesejos();
                break;
            case "progresso":
                await atualizarProgresso();
                break;
            case "estatisticas":
                await estatisticas();
                break;
            case "recomenda√ß√£o":
                await recomendacaoBook(); 
                break;
            case "deletar": 
                await deletarLivros(); 
                break;
            case "sair":
                console.log("üëã At√© a pr√≥xima!");
                return;
        }
    }

};
start();
